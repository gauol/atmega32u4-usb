
CLASS_CDC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000010ee  00001182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080011c  0080011c  0000119e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000611e  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e04  00000000  00000000  0000761e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000086c8  00000000  00000000  00009422  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b30  00000000  00000000  00011aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00017c19  00000000  00000000  0001261c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000458b  00000000  00000000  0002a235  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  0002e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007462  00000000  00000000  0002f428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
       6:	00 00       	nop
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	00 c5       	rjmp	.+2560   	; 0xa2a <__vector_10>
      2a:	00 00       	nop
      2c:	c3 c5       	rjmp	.+2950   	; 0xbb4 <__vector_11>
      2e:	00 00       	nop
      30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop
      98:	6a c0       	rjmp	.+212    	; 0x16e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	68 c0       	rjmp	.+208    	; 0x16e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	66 c0       	rjmp	.+204    	; 0x16e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	64 c0       	rjmp	.+200    	; 0x16e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	62 c0       	rjmp	.+196    	; 0x16e <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	ee ee       	ldi	r30, 0xEE	; 238
     14c:	f0 e1       	ldi	r31, 0x10	; 16
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	ac 31       	cpi	r26, 0x1C	; 28
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	ac e1       	ldi	r26, 0x1C	; 28
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a7 33       	cpi	r26, 0x37	; 55
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	31 d7       	rcall	.+3682   	; 0xfce <main>
     16c:	be c7       	rjmp	.+3964   	; 0x10ea <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     170:	29 2f       	mov	r18, r25
     172:	33 27       	eor	r19, r19
     174:	22 30       	cpi	r18, 0x02	; 2
     176:	31 05       	cpc	r19, r1
     178:	59 f0       	breq	.+22     	; 0x190 <CALLBACK_USB_GetDescriptor+0x20>
     17a:	23 30       	cpi	r18, 0x03	; 3
     17c:	31 05       	cpc	r19, r1
     17e:	69 f0       	breq	.+26     	; 0x19a <CALLBACK_USB_GetDescriptor+0x2a>
     180:	21 30       	cpi	r18, 0x01	; 1
     182:	31 05       	cpc	r19, r1
     184:	21 f5       	brne	.+72     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x5e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     186:	82 e1       	ldi	r24, 0x12	; 18
     188:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     18a:	26 e2       	ldi	r18, 0x26	; 38
     18c:	31 e0       	ldi	r19, 0x01	; 1
     18e:	28 c0       	rjmp	.+80     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x70>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     190:	8e e3       	ldi	r24, 0x3E	; 62
     192:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     194:	28 ee       	ldi	r18, 0xE8	; 232
     196:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     198:	23 c0       	rjmp	.+70     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     19a:	99 27       	eor	r25, r25
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	91 05       	cpc	r25, r1
     1a0:	51 f0       	breq	.+20     	; 0x1b6 <CALLBACK_USB_GetDescriptor+0x46>
     1a2:	18 f0       	brcs	.+6      	; 0x1aa <CALLBACK_USB_GetDescriptor+0x3a>
     1a4:	02 97       	sbiw	r24, 0x02	; 2
     1a6:	69 f0       	breq	.+26     	; 0x1c2 <CALLBACK_USB_GetDescriptor+0x52>
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1aa:	e4 ee       	ldi	r30, 0xE4	; 228
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	84 91       	lpm	r24, Z
     1b0:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     1b2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     1b4:	15 c0       	rjmp	.+42     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1b6:	ea ec       	ldi	r30, 0xCA	; 202
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	84 91       	lpm	r24, Z
     1bc:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     1be:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1c2:	ec ea       	ldi	r30, 0xAC	; 172
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	84 91       	lpm	r24, Z
     1c8:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1ca:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <CALLBACK_USB_GetDescriptor+0x70>
	uint16_t    Size    = NO_DESCRIPTOR;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1e0:	fa 01       	movw	r30, r20
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
	return Size;
}
     1e6:	08 95       	ret

000001e8 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	ec 01       	movw	r28, r24
     1ee:	fc 01       	movw	r30, r24
     1f0:	70 96       	adiw	r30, 0x10	; 16
     1f2:	8b e0       	ldi	r24, 0x0B	; 11
     1f4:	df 01       	movw	r26, r30
     1f6:	1d 92       	st	X+, r1
     1f8:	8a 95       	dec	r24
     1fa:	e9 f7       	brne	.-6      	; 0x1f6 <CDC_Device_ConfigureEndpoints+0xe>
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	8c 83       	std	Y+4, r24	; 0x04
     200:	89 87       	std	Y+9, r24	; 0x09
     202:	83 e0       	ldi	r24, 0x03	; 3
     204:	8e 87       	std	Y+14, r24	; 0x0e
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	ce 01       	movw	r24, r28
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	fc d2       	rcall	.+1528   	; 0x806 <Endpoint_ConfigureEndpointTable>
     20e:	88 23       	and	r24, r24
     210:	51 f0       	breq	.+20     	; 0x226 <CDC_Device_ConfigureEndpoints+0x3e>
     212:	61 e0       	ldi	r22, 0x01	; 1
     214:	ce 01       	movw	r24, r28
     216:	06 96       	adiw	r24, 0x06	; 6
     218:	f6 d2       	rcall	.+1516   	; 0x806 <Endpoint_ConfigureEndpointTable>
     21a:	88 23       	and	r24, r24
     21c:	21 f0       	breq	.+8      	; 0x226 <CDC_Device_ConfigureEndpoints+0x3e>
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	ce 01       	movw	r24, r28
     222:	0b 96       	adiw	r24, 0x0b	; 11
     224:	f0 d2       	rcall	.+1504   	; 0x806 <Endpoint_ConfigureEndpointTable>
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <CDC_Device_SendByte>:
     22c:	cf 93       	push	r28
     22e:	fc 01       	movw	r30, r24
     230:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <USB_DeviceState>
     234:	94 30       	cpi	r25, 0x04	; 4
     236:	e9 f4       	brne	.+58     	; 0x272 <CDC_Device_SendByte+0x46>
     238:	84 89       	ldd	r24, Z+20	; 0x14
     23a:	95 89       	ldd	r25, Z+21	; 0x15
     23c:	a6 89       	ldd	r26, Z+22	; 0x16
     23e:	b7 89       	ldd	r27, Z+23	; 0x17
     240:	89 2b       	or	r24, r25
     242:	8a 2b       	or	r24, r26
     244:	8b 2b       	or	r24, r27
     246:	b9 f0       	breq	.+46     	; 0x276 <CDC_Device_SendByte+0x4a>
     248:	c6 2f       	mov	r28, r22
     24a:	81 81       	ldd	r24, Z+1	; 0x01
     24c:	8f 70       	andi	r24, 0x0F	; 15
     24e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     252:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     256:	85 fd       	sbrc	r24, 5
     258:	08 c0       	rjmp	.+16     	; 0x26a <CDC_Device_SendByte+0x3e>
     25a:	e8 ee       	ldi	r30, 0xE8	; 232
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	8e 77       	andi	r24, 0x7E	; 126
     262:	80 83       	st	Z, r24
     264:	43 d3       	rcall	.+1670   	; 0x8ec <Endpoint_WaitUntilReady>
     266:	81 11       	cpse	r24, r1
     268:	07 c0       	rjmp	.+14     	; 0x278 <CDC_Device_SendByte+0x4c>
     26a:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	03 c0       	rjmp	.+6      	; 0x278 <CDC_Device_SendByte+0x4c>
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	01 c0       	rjmp	.+2      	; 0x278 <CDC_Device_SendByte+0x4c>
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <CDC_Device_putchar>:
     27c:	fb 01       	movw	r30, r22
     27e:	68 2f       	mov	r22, r24
     280:	84 85       	ldd	r24, Z+12	; 0x0c
     282:	95 85       	ldd	r25, Z+13	; 0x0d
     284:	d3 df       	rcall	.-90     	; 0x22c <CDC_Device_SendByte>
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	81 11       	cpse	r24, r1
     28c:	02 c0       	rjmp	.+4      	; 0x292 <CDC_Device_putchar+0x16>
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	88 27       	eor	r24, r24
     294:	99 27       	eor	r25, r25
     296:	82 1b       	sub	r24, r18
     298:	93 0b       	sbc	r25, r19
     29a:	08 95       	ret

0000029c <CDC_Device_Flush>:
     29c:	fc 01       	movw	r30, r24
     29e:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <USB_DeviceState>
     2a2:	94 30       	cpi	r25, 0x04	; 4
     2a4:	29 f5       	brne	.+74     	; 0x2f0 <CDC_Device_Flush+0x54>
     2a6:	84 89       	ldd	r24, Z+20	; 0x14
     2a8:	95 89       	ldd	r25, Z+21	; 0x15
     2aa:	a6 89       	ldd	r26, Z+22	; 0x16
     2ac:	b7 89       	ldd	r27, Z+23	; 0x17
     2ae:	89 2b       	or	r24, r25
     2b0:	8a 2b       	or	r24, r26
     2b2:	8b 2b       	or	r24, r27
     2b4:	f9 f0       	breq	.+62     	; 0x2f4 <CDC_Device_Flush+0x58>
     2b6:	81 81       	ldd	r24, Z+1	; 0x01
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     2be:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     2c2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	92 2b       	or	r25, r18
     2ca:	89 2b       	or	r24, r25
     2cc:	a9 f0       	breq	.+42     	; 0x2f8 <CDC_Device_Flush+0x5c>
     2ce:	e8 ee       	ldi	r30, 0xE8	; 232
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	90 81       	ld	r25, Z
     2d4:	80 81       	ld	r24, Z
     2d6:	8e 77       	andi	r24, 0x7E	; 126
     2d8:	80 83       	st	Z, r24
     2da:	95 fd       	sbrc	r25, 5
     2dc:	0f c0       	rjmp	.+30     	; 0x2fc <CDC_Device_Flush+0x60>
     2de:	06 d3       	rcall	.+1548   	; 0x8ec <Endpoint_WaitUntilReady>
     2e0:	81 11       	cpse	r24, r1
     2e2:	0d c0       	rjmp	.+26     	; 0x2fe <CDC_Device_Flush+0x62>
     2e4:	e8 ee       	ldi	r30, 0xE8	; 232
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	90 81       	ld	r25, Z
     2ea:	9e 77       	andi	r25, 0x7E	; 126
     2ec:	90 83       	st	Z, r25
     2ee:	08 95       	ret
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	08 95       	ret
     2f4:	82 e0       	ldi	r24, 0x02	; 2
     2f6:	08 95       	ret
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	08 95       	ret
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <CDC_Device_USBTask>:
     300:	fc 01       	movw	r30, r24
     302:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <USB_DeviceState>
     306:	94 30       	cpi	r25, 0x04	; 4
     308:	91 f4       	brne	.+36     	; 0x32e <CDC_Device_USBTask+0x2e>
     30a:	84 89       	ldd	r24, Z+20	; 0x14
     30c:	95 89       	ldd	r25, Z+21	; 0x15
     30e:	a6 89       	ldd	r26, Z+22	; 0x16
     310:	b7 89       	ldd	r27, Z+23	; 0x17
     312:	89 2b       	or	r24, r25
     314:	8a 2b       	or	r24, r26
     316:	8b 2b       	or	r24, r27
     318:	51 f0       	breq	.+20     	; 0x32e <CDC_Device_USBTask+0x2e>
     31a:	81 81       	ldd	r24, Z+1	; 0x01
     31c:	8f 70       	andi	r24, 0x0F	; 15
     31e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     322:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     326:	80 ff       	sbrs	r24, 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <CDC_Device_USBTask+0x2e>
     32a:	cf 01       	movw	r24, r30
     32c:	b7 cf       	rjmp	.-146    	; 0x29c <CDC_Device_Flush>
     32e:	08 95       	ret

00000330 <CDC_Device_ReceiveByte>:
     330:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <USB_DeviceState>
     334:	24 30       	cpi	r18, 0x04	; 4
     336:	79 f5       	brne	.+94     	; 0x396 <CDC_Device_ReceiveByte+0x66>
     338:	fc 01       	movw	r30, r24
     33a:	44 89       	ldd	r20, Z+20	; 0x14
     33c:	55 89       	ldd	r21, Z+21	; 0x15
     33e:	66 89       	ldd	r22, Z+22	; 0x16
     340:	77 89       	ldd	r23, Z+23	; 0x17
     342:	45 2b       	or	r20, r21
     344:	46 2b       	or	r20, r22
     346:	47 2b       	or	r20, r23
     348:	49 f1       	breq	.+82     	; 0x39c <CDC_Device_ReceiveByte+0x6c>
     34a:	86 81       	ldd	r24, Z+6	; 0x06
     34c:	8f 70       	andi	r24, 0x0F	; 15
     34e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     352:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     356:	82 ff       	sbrs	r24, 2
     358:	24 c0       	rjmp	.+72     	; 0x3a2 <CDC_Device_ReceiveByte+0x72>
     35a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     35e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	92 2b       	or	r25, r18
     366:	89 2b       	or	r24, r25
     368:	21 f0       	breq	.+8      	; 0x372 <CDC_Device_ReceiveByte+0x42>
     36a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <CDC_Device_ReceiveByte+0x46>
     372:	2f ef       	ldi	r18, 0xFF	; 255
     374:	3f ef       	ldi	r19, 0xFF	; 255
     376:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     37a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	94 2b       	or	r25, r20
     382:	89 2b       	or	r24, r25
     384:	89 f4       	brne	.+34     	; 0x3a8 <CDC_Device_ReceiveByte+0x78>
     386:	e8 ee       	ldi	r30, 0xE8	; 232
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	8b 77       	andi	r24, 0x7B	; 123
     38e:	80 83       	st	Z, r24
     390:	82 2f       	mov	r24, r18
     392:	93 2f       	mov	r25, r19
     394:	08 95       	ret
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	9f ef       	ldi	r25, 0xFF	; 255
     39a:	08 95       	ret
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	9f ef       	ldi	r25, 0xFF	; 255
     3a0:	08 95       	ret
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	9f ef       	ldi	r25, 0xFF	; 255
     3a6:	08 95       	ret
     3a8:	82 2f       	mov	r24, r18
     3aa:	93 2f       	mov	r25, r19
     3ac:	08 95       	ret

000003ae <CDC_Device_getchar>:
     3ae:	fc 01       	movw	r30, r24
     3b0:	84 85       	ldd	r24, Z+12	; 0x0c
     3b2:	95 85       	ldd	r25, Z+13	; 0x0d
     3b4:	bd df       	rcall	.-134    	; 0x330 <CDC_Device_ReceiveByte>
     3b6:	99 23       	and	r25, r25
     3b8:	14 f4       	brge	.+4      	; 0x3be <CDC_Device_getchar+0x10>
     3ba:	8e ef       	ldi	r24, 0xFE	; 254
     3bc:	9f ef       	ldi	r25, 0xFF	; 255
     3be:	08 95       	ret

000003c0 <CDC_Device_CreateStream>:
     3c0:	fb 01       	movw	r30, r22
     3c2:	2e e0       	ldi	r18, 0x0E	; 14
     3c4:	db 01       	movw	r26, r22
     3c6:	1d 92       	st	X+, r1
     3c8:	2a 95       	dec	r18
     3ca:	e9 f7       	brne	.-6      	; 0x3c6 <CDC_Device_CreateStream+0x6>
     3cc:	23 e0       	ldi	r18, 0x03	; 3
     3ce:	23 83       	std	Z+3, r18	; 0x03
     3d0:	2e e3       	ldi	r18, 0x3E	; 62
     3d2:	31 e0       	ldi	r19, 0x01	; 1
     3d4:	31 87       	std	Z+9, r19	; 0x09
     3d6:	20 87       	std	Z+8, r18	; 0x08
     3d8:	27 ed       	ldi	r18, 0xD7	; 215
     3da:	31 e0       	ldi	r19, 0x01	; 1
     3dc:	33 87       	std	Z+11, r19	; 0x0b
     3de:	22 87       	std	Z+10, r18	; 0x0a
     3e0:	95 87       	std	Z+13, r25	; 0x0d
     3e2:	84 87       	std	Z+12, r24	; 0x0c
     3e4:	08 95       	ret

000003e6 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     3e6:	08 95       	ret

000003e8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     3ee:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
     3f2:	93 ff       	sbrs	r25, 3
     3f4:	96 c0       	rjmp	.+300    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     3f6:	20 81       	ld	r18, Z
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_ControlRequest+0x4>
     3fe:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <USB_ControlRequest+0x5>
     402:	82 17       	cp	r24, r18
     404:	93 07       	cpc	r25, r19
     406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	8c c0       	rjmp	.+280    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     40a:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
     40c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <USB_ControlRequest+0x1>
     410:	81 32       	cpi	r24, 0x21	; 33
     412:	59 f0       	breq	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     414:	18 f4       	brcc	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	80 32       	cpi	r24, 0x20	; 32
     418:	b9 f1       	breq	.+110    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     41a:	83 c0       	rjmp	.+262    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     41c:	82 32       	cpi	r24, 0x22	; 34
     41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	5f c0       	rjmp	.+190    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     422:	83 32       	cpi	r24, 0x23	; 35
     424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	6f c0       	rjmp	.+222    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     428:	7c c0       	rjmp	.+248    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     42a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_ControlRequest>
     42e:	81 3a       	cpi	r24, 0xA1	; 161
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	77 c0       	rjmp	.+238    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     434:	e8 ee       	ldi	r30, 0xE8	; 232
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	87 7f       	andi	r24, 0xF7	; 247
     43c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     43e:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     440:	80 ff       	sbrs	r24, 0
     442:	fd cf       	rjmp	.-6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     444:	8c 89       	ldd	r24, Y+20	; 0x14
     446:	9d 89       	ldd	r25, Y+21	; 0x15
     448:	ae 89       	ldd	r26, Y+22	; 0x16
     44a:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     44c:	e1 ef       	ldi	r30, 0xF1	; 241
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
     452:	49 2f       	mov	r20, r25
     454:	5a 2f       	mov	r21, r26
     456:	6b 2f       	mov	r22, r27
     458:	77 27       	eor	r23, r23
     45a:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
     45c:	ad 01       	movw	r20, r26
     45e:	66 27       	eor	r22, r22
     460:	77 27       	eor	r23, r23
     462:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
     464:	8b 2f       	mov	r24, r27
     466:	99 27       	eor	r25, r25
     468:	aa 27       	eor	r26, r26
     46a:	bb 27       	eor	r27, r27
     46c:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     46e:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     470:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     472:	89 8d       	ldd	r24, Y+25	; 0x19
     474:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     476:	8a 8d       	ldd	r24, Y+26	; 0x1a
     478:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     47a:	e8 ee       	ldi	r30, 0xE8	; 232
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	8e 77       	andi	r24, 0x7E	; 126
     482:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     484:	0f d2       	rcall	.+1054   	; 0x8a4 <Endpoint_ClearStatusStage>
     486:	4d c0       	rjmp	.+154    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     488:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_ControlRequest>
     48c:	81 32       	cpi	r24, 0x21	; 33
     48e:	09 f0       	breq	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	48 c0       	rjmp	.+144    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     492:	e8 ee       	ldi	r30, 0xE8	; 232
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	87 7f       	andi	r24, 0xF7	; 247
     49a:	80 83       	st	Z, r24
     49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     49e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>
     4a2:	88 23       	and	r24, r24
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	3d c0       	rjmp	.+122    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4a8:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     4aa:	82 ff       	sbrs	r24, 2
     4ac:	f8 cf       	rjmp	.-16     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     4ae:	e1 ef       	ldi	r30, 0xF1	; 241
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
     4b4:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
     4b6:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
     4b8:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     4ba:	3c 8b       	std	Y+20, r19	; 0x14
     4bc:	2d 8b       	std	Y+21, r18	; 0x15
     4be:	9e 8b       	std	Y+22, r25	; 0x16
     4c0:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4c2:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     4c4:	88 8f       	std	Y+24, r24	; 0x18
     4c6:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     4c8:	89 8f       	std	Y+25, r24	; 0x19
     4ca:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     4cc:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4ce:	e8 ee       	ldi	r30, 0xE8	; 232
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	8b 77       	andi	r24, 0x7B	; 123

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     4d6:	80 83       	st	Z, r24

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     4d8:	e5 d1       	rcall	.+970    	; 0x8a4 <Endpoint_ClearStatusStage>
     4da:	ce 01       	movw	r24, r28
     4dc:	84 df       	rcall	.-248    	; 0x3e6 <CDC_Device_Event_Stub>
     4de:	21 c0       	rjmp	.+66     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     4e0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_ControlRequest>
     4e4:	81 32       	cpi	r24, 0x21	; 33
     4e6:	e9 f4       	brne	.+58     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     4e8:	e8 ee       	ldi	r30, 0xE8	; 232
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     4f0:	80 83       	st	Z, r24
     4f2:	d8 d1       	rcall	.+944    	; 0x8a4 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     4f4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_ControlRequest+0x2>
     4f8:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <USB_ControlRequest+0x3>
     4fc:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     4fe:	88 8b       	std	Y+16, r24	; 0x10
     500:	ce 01       	movw	r24, r28
     502:	71 df       	rcall	.-286    	; 0x3e6 <CDC_Device_Event_Stub>
     504:	0e c0       	rjmp	.+28     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     506:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_ControlRequest>
     50a:	81 32       	cpi	r24, 0x21	; 33
     50c:	51 f4       	brne	.+20     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     50e:	e8 ee       	ldi	r30, 0xE8	; 232
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     516:	80 83       	st	Z, r24
     518:	c5 d1       	rcall	.+906    	; 0x8a4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     51a:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <USB_ControlRequest+0x2>
     51e:	ce 01       	movw	r24, r28
     520:	62 df       	rcall	.-316    	; 0x3e6 <CDC_Device_Event_Stub>
     522:	df 91       	pop	r29
			}

			break;
	}
}
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <Endpoint_Write_Control_Stream_LE>:
     528:	cf 92       	push	r12
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     52a:	df 92       	push	r13
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <USB_ControlRequest+0x6>
     53a:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <USB_ControlRequest+0x7>
     53e:	26 17       	cp	r18, r22
     540:	37 07       	cpc	r19, r23
     542:	58 f0       	brcs	.+22     	; 0x55a <Endpoint_Write_Control_Stream_LE+0x32>
     544:	61 15       	cp	r22, r1
     546:	71 05       	cpc	r23, r1
     548:	39 f4       	brne	.+14     	; 0x558 <Endpoint_Write_Control_Stream_LE+0x30>
     54a:	e8 ee       	ldi	r30, 0xE8	; 232
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	20 81       	ld	r18, Z
     550:	2e 77       	andi	r18, 0x7E	; 126
     552:	20 83       	st	Z, r18
     554:	9b 01       	movw	r18, r22
     556:	01 c0       	rjmp	.+2      	; 0x55a <Endpoint_Write_Control_Stream_LE+0x32>
     558:	9b 01       	movw	r18, r22
     55a:	a8 2f       	mov	r26, r24
     55c:	b9 2f       	mov	r27, r25
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	e8 ee       	ldi	r30, 0xE8	; 232
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	63 ef       	ldi	r22, 0xF3	; 243
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	42 ef       	ldi	r20, 0xF2	; 242
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0f 2e       	mov	r0, r31
     56e:	f1 ef       	ldi	r31, 0xF1	; 241
     570:	cf 2e       	mov	r12, r31
     572:	d1 2c       	mov	r13, r1
     574:	f0 2d       	mov	r31, r0
     576:	01 e0       	ldi	r16, 0x01	; 1
     578:	f1 2c       	mov	r15, r1
     57a:	30 c0       	rjmp	.+96     	; 0x5dc <Endpoint_Write_Control_Stream_LE+0xb4>
     57c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>
     580:	88 23       	and	r24, r24
     582:	09 f4       	brne	.+2      	; 0x586 <Endpoint_Write_Control_Stream_LE+0x5e>
     584:	42 c0       	rjmp	.+132    	; 0x60a <Endpoint_Write_Control_Stream_LE+0xe2>
     586:	85 30       	cpi	r24, 0x05	; 5
     588:	09 f4       	brne	.+2      	; 0x58c <Endpoint_Write_Control_Stream_LE+0x64>
     58a:	41 c0       	rjmp	.+130    	; 0x60e <Endpoint_Write_Control_Stream_LE+0xe6>
     58c:	80 81       	ld	r24, Z
     58e:	83 fd       	sbrc	r24, 3
     590:	40 c0       	rjmp	.+128    	; 0x612 <Endpoint_Write_Control_Stream_LE+0xea>
     592:	80 81       	ld	r24, Z
     594:	82 fd       	sbrc	r24, 2
     596:	32 c0       	rjmp	.+100    	; 0x5fc <Endpoint_Write_Control_Stream_LE+0xd4>
     598:	80 81       	ld	r24, Z
     59a:	80 ff       	sbrs	r24, 0
     59c:	1f c0       	rjmp	.+62     	; 0x5dc <Endpoint_Write_Control_Stream_LE+0xb4>
     59e:	eb 01       	movw	r28, r22
     5a0:	18 81       	ld	r17, Y
     5a2:	ea 01       	movw	r28, r20
     5a4:	88 81       	ld	r24, Y
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	91 2b       	or	r25, r17
     5aa:	21 15       	cp	r18, r1
     5ac:	31 05       	cpc	r19, r1
     5ae:	79 f0       	breq	.+30     	; 0x5ce <Endpoint_Write_Control_Stream_LE+0xa6>
     5b0:	88 30       	cpi	r24, 0x08	; 8
     5b2:	91 05       	cpc	r25, r1
     5b4:	60 f4       	brcc	.+24     	; 0x5ce <Endpoint_Write_Control_Stream_LE+0xa6>
     5b6:	1d 91       	ld	r17, X+
     5b8:	e6 01       	movw	r28, r12
     5ba:	18 83       	st	Y, r17
     5bc:	21 50       	subi	r18, 0x01	; 1
     5be:	31 09       	sbc	r19, r1
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	21 15       	cp	r18, r1
     5c4:	31 05       	cpc	r19, r1
     5c6:	19 f0       	breq	.+6      	; 0x5ce <Endpoint_Write_Control_Stream_LE+0xa6>
     5c8:	88 30       	cpi	r24, 0x08	; 8
     5ca:	91 05       	cpc	r25, r1
     5cc:	a1 f7       	brne	.-24     	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0x8e>
     5ce:	10 2f       	mov	r17, r16
     5d0:	08 97       	sbiw	r24, 0x08	; 8
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <Endpoint_Write_Control_Stream_LE+0xae>
     5d4:	1f 2d       	mov	r17, r15
     5d6:	80 81       	ld	r24, Z
     5d8:	8e 77       	andi	r24, 0x7E	; 126
     5da:	80 83       	st	Z, r24
     5dc:	21 15       	cp	r18, r1
     5de:	31 05       	cpc	r19, r1
     5e0:	69 f6       	brne	.-102    	; 0x57c <Endpoint_Write_Control_Stream_LE+0x54>
     5e2:	11 11       	cpse	r17, r1
     5e4:	cb cf       	rjmp	.-106    	; 0x57c <Endpoint_Write_Control_Stream_LE+0x54>
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <Endpoint_Write_Control_Stream_LE+0xd4>
     5e8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>
     5ec:	88 23       	and	r24, r24
     5ee:	99 f0       	breq	.+38     	; 0x616 <Endpoint_Write_Control_Stream_LE+0xee>
     5f0:	85 30       	cpi	r24, 0x05	; 5
     5f2:	99 f0       	breq	.+38     	; 0x61a <Endpoint_Write_Control_Stream_LE+0xf2>
     5f4:	80 81       	ld	r24, Z
     5f6:	83 ff       	sbrs	r24, 3
     5f8:	03 c0       	rjmp	.+6      	; 0x600 <Endpoint_Write_Control_Stream_LE+0xd8>
     5fa:	11 c0       	rjmp	.+34     	; 0x61e <Endpoint_Write_Control_Stream_LE+0xf6>
     5fc:	e8 ee       	ldi	r30, 0xE8	; 232
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	82 ff       	sbrs	r24, 2
     604:	f1 cf       	rjmp	.-30     	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0xc0>
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	0b c0       	rjmp	.+22     	; 0x620 <Endpoint_Write_Control_Stream_LE+0xf8>
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	09 c0       	rjmp	.+18     	; 0x620 <Endpoint_Write_Control_Stream_LE+0xf8>
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	07 c0       	rjmp	.+14     	; 0x620 <Endpoint_Write_Control_Stream_LE+0xf8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	05 c0       	rjmp	.+10     	; 0x620 <Endpoint_Write_Control_Stream_LE+0xf8>
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	03 c0       	rjmp	.+6      	; 0x620 <Endpoint_Write_Control_Stream_LE+0xf8>
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	01 c0       	rjmp	.+2      	; 0x620 <Endpoint_Write_Control_Stream_LE+0xf8>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	08 95       	ret

00000630 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     63e:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <USB_ControlRequest+0x6>
     642:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <USB_ControlRequest+0x7>
     646:	26 17       	cp	r18, r22
     648:	37 07       	cpc	r19, r23
     64a:	58 f0       	brcs	.+22     	; 0x662 <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     64c:	61 15       	cp	r22, r1
     64e:	71 05       	cpc	r23, r1
     650:	39 f4       	brne	.+14     	; 0x660 <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     652:	e8 ee       	ldi	r30, 0xE8	; 232
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	20 81       	ld	r18, Z
     658:	2e 77       	andi	r18, 0x7E	; 126
     65a:	20 83       	st	Z, r18
     65c:	9b 01       	movw	r18, r22
     65e:	01 c0       	rjmp	.+2      	; 0x662 <Endpoint_Write_Control_PStream_LE+0x32>
     660:	9b 01       	movw	r18, r22
     662:	e8 2f       	mov	r30, r24
     664:	f9 2f       	mov	r31, r25
     666:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     668:	a8 ee       	ldi	r26, 0xE8	; 232
     66a:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     66c:	63 ef       	ldi	r22, 0xF3	; 243
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	42 ef       	ldi	r20, 0xF2	; 242
     672:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     674:	0f 2e       	mov	r0, r31
     676:	f1 ef       	ldi	r31, 0xF1	; 241
     678:	cf 2e       	mov	r12, r31
     67a:	d1 2c       	mov	r13, r1
     67c:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     67e:	01 e0       	ldi	r16, 0x01	; 1
     680:	f1 2c       	mov	r15, r1
     682:	31 c0       	rjmp	.+98     	; 0x6e6 <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     684:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     688:	88 23       	and	r24, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <Endpoint_Write_Control_PStream_LE+0x5e>
     68c:	43 c0       	rjmp	.+134    	; 0x714 <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     68e:	85 30       	cpi	r24, 0x05	; 5
     690:	09 f4       	brne	.+2      	; 0x694 <Endpoint_Write_Control_PStream_LE+0x64>
     692:	42 c0       	rjmp	.+132    	; 0x718 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     694:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     696:	83 fd       	sbrc	r24, 3
     698:	41 c0       	rjmp	.+130    	; 0x71c <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     69a:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     69c:	82 fd       	sbrc	r24, 2
     69e:	33 c0       	rjmp	.+102    	; 0x706 <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6a0:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     6a2:	80 ff       	sbrs	r24, 0
     6a4:	20 c0       	rjmp	.+64     	; 0x6e6 <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     6a6:	eb 01       	movw	r28, r22
     6a8:	18 81       	ld	r17, Y
     6aa:	ea 01       	movw	r28, r20
     6ac:	88 81       	ld	r24, Y
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6b2:	21 15       	cp	r18, r1
     6b4:	31 05       	cpc	r19, r1
     6b6:	81 f0       	breq	.+32     	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0xa8>
     6b8:	88 30       	cpi	r24, 0x08	; 8
     6ba:	91 05       	cpc	r25, r1
     6bc:	68 f4       	brcc	.+26     	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6be:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6c0:	e6 01       	movw	r28, r12
     6c2:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     6c4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     6ca:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6cc:	21 15       	cp	r18, r1
     6ce:	31 05       	cpc	r19, r1
     6d0:	19 f0       	breq	.+6      	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0xa8>
     6d2:	88 30       	cpi	r24, 0x08	; 8
     6d4:	91 05       	cpc	r25, r1
     6d6:	99 f7       	brne	.-26     	; 0x6be <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6d8:	10 2f       	mov	r17, r16
     6da:	08 97       	sbiw	r24, 0x08	; 8
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0xb0>
     6de:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6e0:	8c 91       	ld	r24, X
     6e2:	8e 77       	andi	r24, 0x7E	; 126
     6e4:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     6e6:	21 15       	cp	r18, r1
     6e8:	31 05       	cpc	r19, r1
     6ea:	61 f6       	brne	.-104    	; 0x684 <Endpoint_Write_Control_PStream_LE+0x54>
     6ec:	11 11       	cpse	r17, r1
     6ee:	ca cf       	rjmp	.-108    	; 0x684 <Endpoint_Write_Control_PStream_LE+0x54>
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6f2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6f6:	88 23       	and	r24, r24
     6f8:	99 f0       	breq	.+38     	; 0x720 <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6fa:	85 30       	cpi	r24, 0x05	; 5
     6fc:	99 f0       	breq	.+38     	; 0x724 <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6fe:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     700:	83 ff       	sbrs	r24, 3
     702:	03 c0       	rjmp	.+6      	; 0x70a <Endpoint_Write_Control_PStream_LE+0xda>
     704:	11 c0       	rjmp	.+34     	; 0x728 <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     706:	e8 ee       	ldi	r30, 0xE8	; 232
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     70c:	82 ff       	sbrs	r24, 2
     70e:	f1 cf       	rjmp	.-30     	; 0x6f2 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0b c0       	rjmp	.+22     	; 0x72a <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	09 c0       	rjmp	.+18     	; 0x72a <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	07 c0       	rjmp	.+14     	; 0x72a <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	05 c0       	rjmp	.+10     	; 0x72a <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	03 c0       	rjmp	.+6      	; 0x72a <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     724:	83 e0       	ldi	r24, 0x03	; 3
     726:	01 c0       	rjmp	.+2      	; 0x72a <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     728:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	08 95       	ret

0000073a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	87 30       	cpi	r24, 0x07	; 7
     752:	70 f1       	brcs	.+92     	; 0x7b0 <Endpoint_ConfigureEndpoint_Prv+0x76>
     754:	26 c0       	rjmp	.+76     	; 0x7a2 <Endpoint_ConfigureEndpoint_Prv+0x68>
     756:	29 2f       	mov	r18, r25
     758:	2f 70       	andi	r18, 0x0F	; 15
     75a:	e7 01       	movw	r28, r14
     75c:	28 83       	st	Y, r18
     75e:	89 17       	cp	r24, r25
     760:	31 f0       	breq	.+12     	; 0x76e <Endpoint_ConfigureEndpoint_Prv+0x34>
     762:	e8 01       	movw	r28, r16
     764:	78 81       	ld	r23, Y
     766:	20 81       	ld	r18, Z
     768:	e4 01       	movw	r28, r8
     76a:	58 81       	ld	r21, Y
     76c:	03 c0       	rjmp	.+6      	; 0x774 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     76e:	24 2f       	mov	r18, r20
     770:	76 2f       	mov	r23, r22
     772:	5b 2d       	mov	r21, r11
     774:	21 ff       	sbrs	r18, 1
     776:	12 c0       	rjmp	.+36     	; 0x79c <Endpoint_ConfigureEndpoint_Prv+0x62>
     778:	3c 91       	ld	r19, X
     77a:	3e 7f       	andi	r19, 0xFE	; 254
     77c:	3c 93       	st	X, r19
     77e:	30 81       	ld	r19, Z
     780:	3d 7f       	andi	r19, 0xFD	; 253
     782:	30 83       	st	Z, r19
     784:	3c 91       	ld	r19, X
     786:	31 60       	ori	r19, 0x01	; 1
     788:	3c 93       	st	X, r19
     78a:	e8 01       	movw	r28, r16
     78c:	78 83       	st	Y, r23
     78e:	20 83       	st	Z, r18
     790:	e4 01       	movw	r28, r8
     792:	58 83       	st	Y, r21
     794:	e6 01       	movw	r28, r12
     796:	28 81       	ld	r18, Y
     798:	22 23       	and	r18, r18
     79a:	44 f4       	brge	.+16     	; 0x7ac <Endpoint_ConfigureEndpoint_Prv+0x72>
     79c:	9f 5f       	subi	r25, 0xFF	; 255
     79e:	97 30       	cpi	r25, 0x07	; 7
     7a0:	d1 f6       	brne	.-76     	; 0x756 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     7a2:	8f 70       	andi	r24, 0x0F	; 15
     7a4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	21 c0       	rjmp	.+66     	; 0x7ee <Endpoint_ConfigureEndpoint_Prv+0xb4>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	1f c0       	rjmp	.+62     	; 0x7ee <Endpoint_ConfigureEndpoint_Prv+0xb4>
     7b0:	98 2f       	mov	r25, r24
     7b2:	9f 70       	andi	r25, 0x0F	; 15
     7b4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     7b8:	98 2f       	mov	r25, r24
     7ba:	24 2f       	mov	r18, r20
     7bc:	76 2f       	mov	r23, r22
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	ab ee       	ldi	r26, 0xEB	; 235
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	ed ee       	ldi	r30, 0xED	; 237
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	0c ee       	ldi	r16, 0xEC	; 236
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	0f 2e       	mov	r0, r31
     7ce:	f0 ef       	ldi	r31, 0xF0	; 240
     7d0:	8f 2e       	mov	r8, r31
     7d2:	91 2c       	mov	r9, r1
     7d4:	f0 2d       	mov	r31, r0
     7d6:	0f 2e       	mov	r0, r31
     7d8:	fe ee       	ldi	r31, 0xEE	; 238
     7da:	cf 2e       	mov	r12, r31
     7dc:	d1 2c       	mov	r13, r1
     7de:	f0 2d       	mov	r31, r0
     7e0:	0f 2e       	mov	r0, r31
     7e2:	f9 ee       	ldi	r31, 0xE9	; 233
     7e4:	ef 2e       	mov	r14, r31
     7e6:	f1 2c       	mov	r15, r1
     7e8:	f0 2d       	mov	r31, r0
     7ea:	b1 2c       	mov	r11, r1
     7ec:	c3 cf       	rjmp	.-122    	; 0x774 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	9f 90       	pop	r9
     802:	8f 90       	pop	r8
     804:	08 95       	ret

00000806 <Endpoint_ConfigureEndpointTable>:
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	66 23       	and	r22, r22
     814:	e9 f1       	breq	.+122    	; 0x890 <Endpoint_ConfigureEndpointTable+0x8a>
     816:	06 2f       	mov	r16, r22
     818:	c8 2f       	mov	r28, r24
     81a:	d9 2f       	mov	r29, r25
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	0f 2e       	mov	r0, r31
     820:	f6 e0       	ldi	r31, 0x06	; 6
     822:	ff 2e       	mov	r15, r31
     824:	f0 2d       	mov	r31, r0
     826:	68 94       	set
     828:	ee 24       	eor	r14, r14
     82a:	e1 f8       	bld	r14, 1
     82c:	58 81       	ld	r21, Y
     82e:	55 23       	and	r21, r21
     830:	49 f1       	breq	.+82     	; 0x884 <Endpoint_ConfigureEndpointTable+0x7e>
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	e9 81       	ldd	r30, Y+1	; 0x01
     836:	fa 81       	ldd	r31, Y+2	; 0x02
     838:	6b 81       	ldd	r22, Y+3	; 0x03
     83a:	85 2f       	mov	r24, r21
     83c:	8f 70       	andi	r24, 0x0F	; 15
     83e:	87 30       	cpi	r24, 0x07	; 7
     840:	48 f5       	brcc	.+82     	; 0x894 <Endpoint_ConfigureEndpointTable+0x8e>
     842:	92 30       	cpi	r25, 0x02	; 2
     844:	10 f4       	brcc	.+4      	; 0x84a <Endpoint_ConfigureEndpointTable+0x44>
     846:	4e 2d       	mov	r20, r14
     848:	01 c0       	rjmp	.+2      	; 0x84c <Endpoint_ConfigureEndpointTable+0x46>
     84a:	4f 2d       	mov	r20, r15
     84c:	e9 30       	cpi	r30, 0x09	; 9
     84e:	f1 05       	cpc	r31, r1
     850:	50 f0       	brcs	.+20     	; 0x866 <Endpoint_ConfigureEndpointTable+0x60>
     852:	28 e0       	ldi	r18, 0x08	; 8
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	9f 5f       	subi	r25, 0xFF	; 255
     85a:	22 0f       	add	r18, r18
     85c:	33 1f       	adc	r19, r19
     85e:	2e 17       	cp	r18, r30
     860:	3f 07       	cpc	r19, r31
     862:	d0 f3       	brcs	.-12     	; 0x858 <Endpoint_ConfigureEndpointTable+0x52>
     864:	01 c0       	rjmp	.+2      	; 0x868 <Endpoint_ConfigureEndpointTable+0x62>
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	92 95       	swap	r25
     86a:	90 7f       	andi	r25, 0xF0	; 240
     86c:	49 2b       	or	r20, r25
     86e:	90 e4       	ldi	r25, 0x40	; 64
     870:	69 9f       	mul	r22, r25
     872:	b0 01       	movw	r22, r0
     874:	11 24       	eor	r1, r1
     876:	55 1f       	adc	r21, r21
     878:	55 27       	eor	r21, r21
     87a:	55 1f       	adc	r21, r21
     87c:	65 2b       	or	r22, r21
     87e:	5d df       	rcall	.-326    	; 0x73a <Endpoint_ConfigureEndpoint_Prv>
     880:	88 23       	and	r24, r24
     882:	49 f0       	breq	.+18     	; 0x896 <Endpoint_ConfigureEndpointTable+0x90>
     884:	1f 5f       	subi	r17, 0xFF	; 255
     886:	25 96       	adiw	r28, 0x05	; 5
     888:	01 13       	cpse	r16, r17
     88a:	d0 cf       	rjmp	.-96     	; 0x82c <Endpoint_ConfigureEndpointTable+0x26>
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	03 c0       	rjmp	.+6      	; 0x896 <Endpoint_ConfigureEndpointTable+0x90>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	01 c0       	rjmp	.+2      	; 0x896 <Endpoint_ConfigureEndpointTable+0x90>
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	08 95       	ret

000008a4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     8a4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <USB_ControlRequest>
     8a8:	88 23       	and	r24, r24
     8aa:	44 f0       	brlt	.+16     	; 0x8bc <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8ac:	e8 ee       	ldi	r30, 0xE8	; 232
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	14 c0       	rjmp	.+40     	; 0x8da <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     8b2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>
     8b6:	81 11       	cpse	r24, r1
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <Endpoint_ClearStatusStage+0x1c>
     8ba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8bc:	e8 ee       	ldi	r30, 0xE8	; 232
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     8c2:	82 ff       	sbrs	r24, 2
     8c4:	f6 cf       	rjmp	.-20     	; 0x8b2 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8c6:	e8 ee       	ldi	r30, 0xE8	; 232
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	8b 77       	andi	r24, 0x7B	; 123
     8ce:	80 83       	st	Z, r24
     8d0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     8d2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>
     8d6:	88 23       	and	r24, r24
     8d8:	41 f0       	breq	.+16     	; 0x8ea <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8da:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     8dc:	80 ff       	sbrs	r24, 0
     8de:	f9 cf       	rjmp	.-14     	; 0x8d2 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8e0:	e8 ee       	ldi	r30, 0xE8	; 232
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	8e 77       	andi	r24, 0x7E	; 126
     8e8:	80 83       	st	Z, r24
     8ea:	08 95       	ret

000008ec <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     8f4:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     8f8:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     8fc:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     8fe:	ac ee       	ldi	r26, 0xEC	; 236
     900:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     902:	e8 ee       	ldi	r30, 0xE8	; 232
     904:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     906:	0b ee       	ldi	r16, 0xEB	; 235
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	44 ee       	ldi	r20, 0xE4	; 228
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	01 c0       	rjmp	.+2      	; 0x912 <Endpoint_WaitUntilReady+0x26>
     910:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     912:	9c 91       	ld	r25, X
     914:	89 2f       	mov	r24, r25
     916:	81 70       	andi	r24, 0x01	; 1
     918:	90 fd       	sbrc	r25, 0
     91a:	1d c0       	rjmp	.+58     	; 0x956 <Endpoint_WaitUntilReady+0x6a>
     91c:	20 c0       	rjmp	.+64     	; 0x95e <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     91e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     922:	88 23       	and	r24, r24
     924:	81 f0       	breq	.+32     	; 0x946 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     926:	85 30       	cpi	r24, 0x05	; 5
     928:	81 f0       	breq	.+32     	; 0x94a <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     92a:	e8 01       	movw	r28, r16
     92c:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     92e:	85 fd       	sbrc	r24, 5
     930:	0e c0       	rjmp	.+28     	; 0x94e <Endpoint_WaitUntilReady+0x62>
     932:	ea 01       	movw	r28, r20
     934:	88 81       	ld	r24, Y
     936:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	51 f3       	breq	.-44     	; 0x912 <Endpoint_WaitUntilReady+0x26>
     93e:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     940:	39 f7       	brne	.-50     	; 0x910 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	0f c0       	rjmp	.+30     	; 0x964 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	0d c0       	rjmp	.+26     	; 0x964 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	0b c0       	rjmp	.+22     	; 0x964 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	09 c0       	rjmp	.+18     	; 0x964 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	07 c0       	rjmp	.+14     	; 0x964 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     956:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     958:	80 ff       	sbrs	r24, 0
     95a:	e1 cf       	rjmp	.-62     	; 0x91e <Endpoint_WaitUntilReady+0x32>
     95c:	fa cf       	rjmp	.-12     	; 0x952 <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     95e:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     960:	92 ff       	sbrs	r25, 2
     962:	dd cf       	rjmp	.-70     	; 0x91e <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     976:	4c d0       	rcall	.+152    	; 0xa10 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     978:	53 d0       	rcall	.+166    	; 0xa20 <USB_INT_ClearAllInterrupts>
     97a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     97c:	d0 e0       	ldi	r29, 0x00	; 0
     97e:	88 81       	ld	r24, Y
     980:	8f 77       	andi	r24, 0x7F	; 127
     982:	88 83       	st	Y, r24
     984:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     986:	80 68       	ori	r24, 0x80	; 128
     988:	88 83       	st	Y, r24
     98a:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     98c:	8f 7d       	andi	r24, 0xDF	; 223
     98e:	88 83       	st	Y, r24
     990:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     992:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     996:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     99a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     99e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     9a2:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     9a4:	10 e0       	ldi	r17, 0x00	; 0
     9a6:	f8 01       	movw	r30, r16
     9a8:	80 81       	ld	r24, Z
     9aa:	8b 7f       	andi	r24, 0xFB	; 251
     9ac:	80 83       	st	Z, r24
     9ae:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     9b0:	81 60       	ori	r24, 0x01	; 1
     9b2:	88 83       	st	Y, r24
     9b4:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	bf de       	rcall	.-642    	; 0x73a <Endpoint_ConfigureEndpoint_Prv>
     9bc:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	8e 7f       	andi	r24, 0xFE	; 254
     9c4:	80 83       	st	Z, r24
     9c6:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	81 60       	ori	r24, 0x01	; 1
     9ce:	80 83       	st	Z, r24
     9d0:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     9d2:	88 60       	ori	r24, 0x08	; 8
     9d4:	80 83       	st	Z, r24
     9d6:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     9d8:	80 81       	ld	r24, Z
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	80 83       	st	Z, r24
     9de:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     9e0:	80 61       	ori	r24, 0x10	; 16
     9e2:	88 83       	st	Y, r24
     9e4:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <USB_Init>:
     9ee:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	8f 7e       	andi	r24, 0xEF	; 239
     9f6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     9f8:	e7 ed       	ldi	r30, 0xD7	; 215
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     a02:	84 e0       	ldi	r24, 0x04	; 4
     a04:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <USB_IsInitialized>

	USB_ResetInterface();
     a0c:	b0 cf       	rjmp	.-160    	; 0x96e <USB_ResetInterface>
     a0e:	08 95       	ret

00000a10 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     a10:	e8 ed       	ldi	r30, 0xD8	; 216
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	8e 7f       	andi	r24, 0xFE	; 254
     a18:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a1a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     a1e:	08 95       	ret

00000a20 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a20:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a24:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     a28:	08 95       	ret

00000a2a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	2f 93       	push	r18
     a36:	3f 93       	push	r19
     a38:	4f 93       	push	r20
     a3a:	5f 93       	push	r21
     a3c:	6f 93       	push	r22
     a3e:	7f 93       	push	r23
     a40:	8f 93       	push	r24
     a42:	9f 93       	push	r25
     a44:	af 93       	push	r26
     a46:	bf 93       	push	r27
     a48:	ef 93       	push	r30
     a4a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     a4c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     a50:	82 ff       	sbrs	r24, 2
     a52:	0a c0       	rjmp	.+20     	; 0xa68 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     a54:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     a58:	82 ff       	sbrs	r24, 2
     a5a:	06 c0       	rjmp	.+12     	; 0xa68 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     a5c:	e1 ee       	ldi	r30, 0xE1	; 225
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	8b 7f       	andi	r24, 0xFB	; 251
     a64:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     a66:	6e d2       	rcall	.+1244   	; 0xf44 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     a68:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     a6c:	80 ff       	sbrs	r24, 0
     a6e:	1d c0       	rjmp	.+58     	; 0xaaa <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     a70:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     a74:	80 ff       	sbrs	r24, 0
     a76:	19 c0       	rjmp	.+50     	; 0xaaa <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     a78:	ea ed       	ldi	r30, 0xDA	; 218
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	8e 7f       	andi	r24, 0xFE	; 254
     a80:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     a82:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     a86:	80 ff       	sbrs	r24, 0
     a88:	0c c0       	rjmp	.+24     	; 0xaa2 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a8a:	80 e1       	ldi	r24, 0x10	; 16
     a8c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a8e:	82 e1       	ldi	r24, 0x12	; 18
     a90:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     a92:	09 b4       	in	r0, 0x29	; 41
     a94:	00 fe       	sbrs	r0, 0
     a96:	fd cf       	rjmp	.-6      	; 0xa92 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_DeviceState>
			EVENT_USB_Device_Connect();
     a9e:	d7 d2       	rcall	.+1454   	; 0x104e <EVENT_USB_Device_Connect>
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     aa2:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     aa4:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     aa8:	d3 d2       	rcall	.+1446   	; 0x1050 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     aaa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     aae:	80 ff       	sbrs	r24, 0
     ab0:	16 c0       	rjmp	.+44     	; 0xade <__vector_10+0xb4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ab2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ab6:	80 ff       	sbrs	r24, 0
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__vector_10+0xb4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     aba:	e2 ee       	ldi	r30, 0xE2	; 226
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	8e 7f       	andi	r24, 0xFE	; 254
     ac2:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ac4:	80 81       	ld	r24, Z
     ac6:	80 61       	ori	r24, 0x10	; 16
     ac8:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     aca:	e8 ed       	ldi	r30, 0xD8	; 216
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	80 62       	ori	r24, 0x20	; 32
     ad2:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ad4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     ad6:	85 e0       	ldi	r24, 0x05	; 5
     ad8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     adc:	33 d2       	rcall	.+1126   	; 0xf44 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     ade:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     ae2:	84 ff       	sbrs	r24, 4
     ae4:	2f c0       	rjmp	.+94     	; 0xb44 <__stack+0x45>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ae6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     aea:	84 ff       	sbrs	r24, 4
     aec:	2b c0       	rjmp	.+86     	; 0xb44 <__stack+0x45>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     aee:	80 e1       	ldi	r24, 0x10	; 16
     af0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     af2:	82 e1       	ldi	r24, 0x12	; 18
     af4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     af6:	09 b4       	in	r0, 0x29	; 41
     af8:	00 fe       	sbrs	r0, 0
     afa:	fd cf       	rjmp	.-6      	; 0xaf6 <__vector_10+0xcc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     afc:	e8 ed       	ldi	r30, 0xD8	; 216
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	8f 7d       	andi	r24, 0xDF	; 223
     b04:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b06:	e1 ee       	ldi	r30, 0xE1	; 225
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8f 7e       	andi	r24, 0xEF	; 239
     b0e:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b10:	e2 ee       	ldi	r30, 0xE2	; 226
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8f 7e       	andi	r24, 0xEF	; 239
     b18:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b1a:	80 81       	ld	r24, Z
     b1c:	81 60       	ori	r24, 0x01	; 1
     b1e:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b20:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_Device_ConfigurationNumber>
     b24:	88 23       	and	r24, r24
     b26:	21 f0       	breq	.+8      	; 0xb30 <__stack+0x31>
		  USB_DeviceState = DEVICE_STATE_Configured;
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_DeviceState>
     b2e:	09 c0       	rjmp	.+18     	; 0xb42 <__stack+0x43>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b30:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     b34:	88 23       	and	r24, r24
     b36:	14 f0       	brlt	.+4      	; 0xb3c <__stack+0x3d>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <__stack+0x3f>
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     b42:	00 d2       	rcall	.+1024   	; 0xf44 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b44:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b48:	83 ff       	sbrs	r24, 3
     b4a:	23 c0       	rjmp	.+70     	; 0xb92 <__stack+0x93>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     b4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     b50:	83 ff       	sbrs	r24, 3
     b52:	1f c0       	rjmp	.+62     	; 0xb92 <__stack+0x93>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     b54:	e1 ee       	ldi	r30, 0xE1	; 225
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	87 7f       	andi	r24, 0xF7	; 247
     b5c:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     b64:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b68:	80 81       	ld	r24, Z
     b6a:	8e 7f       	andi	r24, 0xFE	; 254
     b6c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b6e:	e2 ee       	ldi	r30, 0xE2	; 226
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b78:	80 81       	ld	r24, Z
     b7a:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b7c:	80 83       	st	Z, r24
     b7e:	42 e0       	ldi	r20, 0x02	; 2
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b84:	da dd       	rcall	.-1100   	; 0x73a <Endpoint_ConfigureEndpoint_Prv>
     b86:	e0 ef       	ldi	r30, 0xF0	; 240
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     b8e:	80 83       	st	Z, r24
     b90:	d9 d1       	rcall	.+946    	; 0xf44 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b92:	ff 91       	pop	r31
     b94:	ef 91       	pop	r30
     b96:	bf 91       	pop	r27
     b98:	af 91       	pop	r26
     b9a:	9f 91       	pop	r25
     b9c:	8f 91       	pop	r24
     b9e:	7f 91       	pop	r23
     ba0:	6f 91       	pop	r22
     ba2:	5f 91       	pop	r21
     ba4:	4f 91       	pop	r20
     ba6:	3f 91       	pop	r19
     ba8:	2f 91       	pop	r18
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     be2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     be6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     be8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     bec:	d8 2f       	mov	r29, r24
     bee:	d1 70       	andi	r29, 0x01	; 1
     bf0:	80 fd       	sbrc	r24, 0
     bf2:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f9 ee       	ldi	r31, 0xE9	; 233
     bf8:	ef 2e       	mov	r14, r31
     bfa:	f1 2c       	mov	r15, r1
     bfc:	f0 2d       	mov	r31, r0
     bfe:	f7 01       	movw	r30, r14
     c00:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     c02:	00 ef       	ldi	r16, 0xF0	; 240
     c04:	10 e0       	ldi	r17, 0x00	; 0
     c06:	f8 01       	movw	r30, r16
     c08:	80 81       	ld	r24, Z
     c0a:	87 7f       	andi	r24, 0xF7	; 247
     c0c:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     c0e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     c10:	21 d0       	rcall	.+66     	; 0xc54 <USB_Device_ProcessControlRequest>
     c12:	f7 01       	movw	r30, r14
     c14:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c16:	f8 01       	movw	r30, r16
     c18:	80 81       	ld	r24, Z
     c1a:	88 60       	ori	r24, 0x08	; 8
     c1c:	80 83       	st	Z, r24
     c1e:	cd 2b       	or	r28, r29
     c20:	cf 70       	andi	r28, 0x0F	; 15
     c22:	f7 01       	movw	r30, r14
     c24:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     c26:	ff 91       	pop	r31
     c28:	ef 91       	pop	r30
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	aa 97       	sbiw	r28, 0x2a	; 42
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	ef e2       	ldi	r30, 0x2F	; 47
     c6e:	f1 e0       	ldi	r31, 0x01	; 1
     c70:	27 e3       	ldi	r18, 0x37	; 55
     c72:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c74:	a1 ef       	ldi	r26, 0xF1	; 241
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     c7a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     c7c:	2e 17       	cp	r18, r30
     c7e:	3f 07       	cpc	r19, r31
     c80:	d9 f7       	brne	.-10     	; 0xc78 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     c82:	eb d1       	rcall	.+982    	; 0x105a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     c88:	83 ff       	sbrs	r24, 3
     c8a:	37 c1       	rjmp	.+622    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     c8c:	ef e2       	ldi	r30, 0x2F	; 47
     c8e:	f1 e0       	ldi	r31, 0x01	; 1
     c90:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
     c92:	81 81       	ldd	r24, Z+1	; 0x01
     c94:	85 30       	cpi	r24, 0x05	; 5
     c96:	09 f4       	brne	.+2      	; 0xc9a <USB_Device_ProcessControlRequest+0x46>
     c98:	7f c0       	rjmp	.+254    	; 0xd98 <USB_Device_ProcessControlRequest+0x144>
     c9a:	30 f4       	brcc	.+12     	; 0xca8 <USB_Device_ProcessControlRequest+0x54>
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	c9 f1       	breq	.+114    	; 0xd12 <USB_Device_ProcessControlRequest+0xbe>
     ca0:	68 f0       	brcs	.+26     	; 0xcbc <USB_Device_ProcessControlRequest+0x68>
     ca2:	83 30       	cpi	r24, 0x03	; 3
     ca4:	b1 f1       	breq	.+108    	; 0xd12 <USB_Device_ProcessControlRequest+0xbe>
     ca6:	29 c1       	rjmp	.+594    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
     ca8:	88 30       	cpi	r24, 0x08	; 8
     caa:	09 f4       	brne	.+2      	; 0xcae <USB_Device_ProcessControlRequest+0x5a>
     cac:	f1 c0       	rjmp	.+482    	; 0xe90 <USB_Device_ProcessControlRequest+0x23c>
     cae:	89 30       	cpi	r24, 0x09	; 9
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <USB_Device_ProcessControlRequest+0x60>
     cb2:	fe c0       	rjmp	.+508    	; 0xeb0 <USB_Device_ProcessControlRequest+0x25c>
     cb4:	86 30       	cpi	r24, 0x06	; 6
     cb6:	09 f0       	breq	.+2      	; 0xcba <USB_Device_ProcessControlRequest+0x66>
     cb8:	20 c1       	rjmp	.+576    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
     cba:	91 c0       	rjmp	.+290    	; 0xdde <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cbc:	90 38       	cpi	r25, 0x80	; 128
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <USB_Device_ProcessControlRequest+0x74>
     cc0:	92 38       	cpi	r25, 0x82	; 130
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <USB_Device_ProcessControlRequest+0x72>
     cc4:	1a c1       	rjmp	.+564    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     cc8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ccc:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <USB_Device_RemoteWakeupEnabled>
     cd0:	99 23       	and	r25, r25
     cd2:	89 f0       	breq	.+34     	; 0xcf6 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     cd4:	82 60       	ori	r24, 0x02	; 2
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <USB_Device_ProcessControlRequest+0xa2>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     cd8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_ControlRequest+0x4>
     cdc:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     cde:	87 30       	cpi	r24, 0x07	; 7
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <USB_Device_ProcessControlRequest+0x90>
     ce2:	0b c1       	rjmp	.+534    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ce4:	e9 ee       	ldi	r30, 0xE9	; 233
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     cea:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     cee:	85 fb       	bst	r24, 5
     cf0:	88 27       	eor	r24, r24
     cf2:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf4:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf6:	e8 ee       	ldi	r30, 0xE8	; 232
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	90 81       	ld	r25, Z
     cfc:	97 7f       	andi	r25, 0xF7	; 247
     cfe:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d00:	a1 ef       	ldi	r26, 0xF1	; 241
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
     d06:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d08:	80 81       	ld	r24, Z
     d0a:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d0c:	80 83       	st	Z, r24
     d0e:	ca dd       	rcall	.-1132   	; 0x8a4 <Endpoint_ClearStatusStage>
     d10:	f4 c0       	rjmp	.+488    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d12:	99 23       	and	r25, r25
     d14:	09 f4       	brne	.+2      	; 0xd18 <USB_Device_ProcessControlRequest+0xc4>
     d16:	00 c1       	rjmp	.+512    	; 0xf18 <USB_Device_ProcessControlRequest+0x2c4>
     d18:	92 30       	cpi	r25, 0x02	; 2
     d1a:	09 f0       	breq	.+2      	; 0xd1e <USB_Device_ProcessControlRequest+0xca>
     d1c:	ee c0       	rjmp	.+476    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
     d1e:	01 c1       	rjmp	.+514    	; 0xf22 <USB_Device_ProcessControlRequest+0x2ce>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	09 f0       	breq	.+2      	; 0xd28 <USB_Device_ProcessControlRequest+0xd4>
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <USB_Device_RemoteWakeupEnabled>
     d2c:	2c c0       	rjmp	.+88     	; 0xd86 <USB_Device_ProcessControlRequest+0x132>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d2e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_ControlRequest+0x4>
     d32:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     d34:	9f ef       	ldi	r25, 0xFF	; 255
     d36:	98 0f       	add	r25, r24
     d38:	96 30       	cpi	r25, 0x06	; 6
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <USB_Device_ProcessControlRequest+0xea>
     d3c:	de c0       	rjmp	.+444    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d3e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     d42:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     d46:	90 ff       	sbrs	r25, 0
     d48:	1e c0       	rjmp	.+60     	; 0xd86 <USB_Device_ProcessControlRequest+0x132>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     d4a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <USB_ControlRequest+0x1>
     d4e:	93 30       	cpi	r25, 0x03	; 3
     d50:	31 f4       	brne	.+12     	; 0xd5e <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d52:	eb ee       	ldi	r30, 0xEB	; 235
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 62       	ori	r24, 0x20	; 32
     d5a:	80 83       	st	Z, r24
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     d5e:	eb ee       	ldi	r30, 0xEB	; 235
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	90 81       	ld	r25, Z
     d64:	90 61       	ori	r25, 0x10	; 16
     d66:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	a9 01       	movw	r20, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <USB_Device_ProcessControlRequest+0x120>
     d70:	44 0f       	add	r20, r20
     d72:	55 1f       	adc	r21, r21
     d74:	8a 95       	dec	r24
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <USB_Device_ProcessControlRequest+0x11c>
     d78:	aa ee       	ldi	r26, 0xEA	; 234
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	4c 93       	st	X, r20
				UERST = 0;
     d7e:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     d80:	80 81       	ld	r24, Z
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d86:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d8a:	e8 ee       	ldi	r30, 0xE8	; 232
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d92:	80 83       	st	Z, r24
     d94:	87 dd       	rcall	.-1266   	; 0x8a4 <Endpoint_ClearStatusStage>
     d96:	b1 c0       	rjmp	.+354    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d98:	91 11       	cpse	r25, r1
     d9a:	af c0       	rjmp	.+350    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     d9c:	10 91 31 01 	lds	r17, 0x0131	; 0x800131 <USB_ControlRequest+0x2>
     da0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     da2:	e3 ee       	ldi	r30, 0xE3	; 227
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	80 78       	andi	r24, 0x80	; 128
     daa:	81 2b       	or	r24, r17
     dac:	80 83       	st	Z, r24
     dae:	e8 ee       	ldi	r30, 0xE8	; 232
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     db6:	80 83       	st	Z, r24
     db8:	75 dd       	rcall	.-1302   	; 0x8a4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dba:	e8 ee       	ldi	r30, 0xE8	; 232
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
     dc0:	80 ff       	sbrs	r24, 0
     dc2:	fd cf       	rjmp	.-6      	; 0xdbe <USB_Device_ProcessControlRequest+0x16a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     dc4:	e3 ee       	ldi	r30, 0xE3	; 227
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     dce:	11 11       	cpse	r17, r1
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <USB_Device_ProcessControlRequest+0x182>
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <USB_Device_ProcessControlRequest+0x184>
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_DeviceState>
     ddc:	8e c0       	rjmp	.+284    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     dde:	90 58       	subi	r25, 0x80	; 128
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	08 f0       	brcs	.+2      	; 0xde6 <USB_Device_ProcessControlRequest+0x192>
     de4:	8a c0       	rjmp	.+276    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     de6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_ControlRequest+0x2>
     dea:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <USB_ControlRequest+0x3>
     dee:	8c 3d       	cpi	r24, 0xDC	; 220
     df0:	53 e0       	ldi	r21, 0x03	; 3
     df2:	95 07       	cpc	r25, r21
     df4:	99 f5       	brne	.+102    	; 0xe5c <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     dfa:	8a e2       	ldi	r24, 0x2A	; 42
     dfc:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     dfe:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e00:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e02:	de 01       	movw	r26, r28
     e04:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e06:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     e08:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e0a:	41 e2       	ldi	r20, 0x21	; 33
     e0c:	e3 2f       	mov	r30, r19
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     e14:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
     e16:	20 ff       	sbrs	r18, 0
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
     e1a:	82 95       	swap	r24
     e1c:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     e1e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     e20:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     e22:	8a 30       	cpi	r24, 0x0A	; 10
     e24:	18 f0       	brcs	.+6      	; 0xe2c <USB_Device_ProcessControlRequest+0x1d8>
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	c7 96       	adiw	r24, 0x37	; 55
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <USB_Device_ProcessControlRequest+0x1dc>
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	c0 96       	adiw	r24, 0x30	; 48
     e30:	8d 93       	st	X+, r24
     e32:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e34:	2f 5f       	subi	r18, 0xFF	; 255
     e36:	24 31       	cpi	r18, 0x14	; 20
     e38:	49 f7       	brne	.-46     	; 0xe0c <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e3a:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e3c:	08 ee       	ldi	r16, 0xE8	; 232
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	f8 01       	movw	r30, r16
     e42:	80 81       	ld	r24, Z
     e44:	87 7f       	andi	r24, 0xF7	; 247
     e46:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     e48:	6a e2       	ldi	r22, 0x2A	; 42
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	6b db       	rcall	.-2346   	; 0x528 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e52:	f8 01       	movw	r30, r16
     e54:	80 81       	ld	r24, Z
     e56:	8b 77       	andi	r24, 0x7B	; 123
     e58:	80 83       	st	Z, r24
     e5a:	4f c0       	rjmp	.+158    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     e5c:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <USB_ControlRequest+0x4>
     e60:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <USB_ControlRequest+0x5>
     e64:	ae 01       	movw	r20, r28
     e66:	4f 5f       	subi	r20, 0xFF	; 255
     e68:	5f 4f       	sbci	r21, 0xFF	; 255
     e6a:	82 d9       	rcall	.-3324   	; 0x170 <CALLBACK_USB_GetDescriptor>
     e6c:	bc 01       	movw	r22, r24
     e6e:	89 2b       	or	r24, r25
     e70:	09 f4       	brne	.+2      	; 0xe74 <USB_Device_ProcessControlRequest+0x220>
     e72:	43 c0       	rjmp	.+134    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e74:	08 ee       	ldi	r16, 0xE8	; 232
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	f8 01       	movw	r30, r16
     e7a:	90 81       	ld	r25, Z
     e7c:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     e7e:	90 83       	st	Z, r25
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	d5 db       	rcall	.-2134   	; 0x630 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e86:	f8 01       	movw	r30, r16
     e88:	80 81       	ld	r24, Z
     e8a:	8b 77       	andi	r24, 0x7B	; 123
     e8c:	80 83       	st	Z, r24
     e8e:	35 c0       	rjmp	.+106    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     e90:	90 38       	cpi	r25, 0x80	; 128
     e92:	99 f5       	brne	.+102    	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e94:	e8 ee       	ldi	r30, 0xE8	; 232
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	87 7f       	andi	r24, 0xF7	; 247
     e9c:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     e9e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ea2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ea6:	80 81       	ld	r24, Z
     ea8:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     eaa:	80 83       	st	Z, r24
     eac:	fb dc       	rcall	.-1546   	; 0x8a4 <Endpoint_ClearStatusStage>
     eae:	25 c0       	rjmp	.+74     	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     eb0:	91 11       	cpse	r25, r1
     eb2:	23 c0       	rjmp	.+70     	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     eb4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_ControlRequest+0x2>
     eb8:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <USB_ControlRequest+0x3>
     ebc:	99 27       	eor	r25, r25
     ebe:	02 97       	sbiw	r24, 0x02	; 2
     ec0:	e4 f4       	brge	.+56     	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec2:	e8 ee       	ldi	r30, 0xE8	; 232
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     eca:	80 83       	st	Z, r24
     ecc:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_ControlRequest+0x2>
     ed0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     ed4:	e7 dc       	rcall	.-1586   	; 0x8a4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     ed6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <USB_Device_ConfigurationNumber>
     eda:	88 23       	and	r24, r24
     edc:	21 f0       	breq	.+8      	; 0xee6 <USB_Device_ProcessControlRequest+0x292>
	  USB_DeviceState = DEVICE_STATE_Configured;
     ede:	84 e0       	ldi	r24, 0x04	; 4
     ee0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_DeviceState>
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <USB_Device_ProcessControlRequest+0x2a4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ee6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     eea:	88 23       	and	r24, r24
     eec:	14 f0       	brlt	.+4      	; 0xef2 <USB_Device_ProcessControlRequest+0x29e>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <USB_Device_ProcessControlRequest+0x2a0>
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     ef8:	ac d0       	rcall	.+344    	; 0x1052 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     efa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     efe:	83 ff       	sbrs	r24, 3
     f00:	16 c0       	rjmp	.+44     	; 0xf2e <USB_Device_ProcessControlRequest+0x2da>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f02:	e8 ee       	ldi	r30, 0xE8	; 232
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	87 7f       	andi	r24, 0xF7	; 247
     f0a:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f0c:	eb ee       	ldi	r30, 0xEB	; 235
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 62       	ori	r24, 0x20	; 32
     f14:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <USB_Device_ProcessControlRequest+0x2da>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     f18:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <USB_ControlRequest+0x2>
     f1c:	91 30       	cpi	r25, 0x01	; 1
     f1e:	69 f7       	brne	.-38     	; 0xefa <USB_Device_ProcessControlRequest+0x2a6>
     f20:	ff ce       	rjmp	.-514    	; 0xd20 <USB_Device_ProcessControlRequest+0xcc>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     f22:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <USB_ControlRequest+0x2>
     f26:	88 23       	and	r24, r24
     f28:	09 f4       	brne	.+2      	; 0xf2c <USB_Device_ProcessControlRequest+0x2d8>
     f2a:	01 cf       	rjmp	.-510    	; 0xd2e <USB_Device_ProcessControlRequest+0xda>
     f2c:	2c cf       	rjmp	.-424    	; 0xd86 <USB_Device_ProcessControlRequest+0x132>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     f2e:	aa 96       	adiw	r28, 0x2a	; 42
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	08 95       	ret

00000f44 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f44:	08 95       	ret

00000f46 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f46:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     f48:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <USB_DeviceState>
     f4c:	88 23       	and	r24, r24
     f4e:	99 f0       	breq	.+38     	; 0xf76 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f50:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     f54:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f56:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     f5a:	98 2f       	mov	r25, r24
     f5c:	91 70       	andi	r25, 0x01	; 1
     f5e:	80 fd       	sbrc	r24, 0
     f60:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f62:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f64:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     f6c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     f6e:	72 de       	rcall	.-796    	; 0xc54 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f70:	cf 70       	andi	r28, 0x0F	; 15
     f72:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <blink>:
	USB_Init();
}

/** Checks for changes in the position of the board joystick, sending strings to the host upon each change. */
void CheckJoystickMovement(void)
{
     f7a:	9b b1       	in	r25, 0x0b	; 11
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	98 27       	eor	r25, r24
     f80:	9b b9       	out	0x0b, r25	; 11
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	31 ee       	ldi	r19, 0xE1	; 225
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	30 40       	sbci	r19, 0x00	; 0
     f8c:	90 40       	sbci	r25, 0x00	; 0
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <blink+0xe>
     f90:	00 c0       	rjmp	.+0      	; 0xf92 <blink+0x18>
     f92:	00 00       	nop
     f94:	9b b1       	in	r25, 0x0b	; 11
     f96:	89 27       	eor	r24, r25
     f98:	8b b9       	out	0x0b, r24	; 11
     f9a:	08 95       	ret

00000f9c <SetupHardware>:
     f9c:	84 b7       	in	r24, 0x34	; 52
     f9e:	87 7f       	andi	r24, 0xF7	; 247
     fa0:	84 bf       	out	0x34, r24	; 52
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	a8 95       	wdr
     fa8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     fac:	88 61       	ori	r24, 0x18	; 24
     fae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     fb2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	80 e8       	ldi	r24, 0x80	; 128
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     fc4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	11 cd       	rjmp	.-1502   	; 0x9ee <USB_Init>
     fcc:	08 95       	ret

00000fce <main>:
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	cf 5f       	subi	r28, 0xFF	; 255
     fd8:	d1 09       	sbc	r29, r1
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	db df       	rcall	.-74     	; 0xf9c <SetupHardware>
     fe6:	51 9a       	sbi	0x0a, 1	; 10
     fe8:	6c e1       	ldi	r22, 0x1C	; 28
     fea:	71 e0       	ldi	r23, 0x01	; 1
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	e7 d9       	rcall	.-3122   	; 0x3c0 <CDC_Device_CreateStream>
     ff2:	78 94       	sei
     ff4:	8e 01       	movw	r16, r28
     ff6:	0f 5f       	subi	r16, 0xFF	; 255
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	68 94       	set
     ffc:	ff 24       	eor	r15, r15
     ffe:	f1 f8       	bld	r15, 1
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	95 d9       	rcall	.-3286   	; 0x330 <CDC_Device_ReceiveByte>
    1006:	18 16       	cp	r1, r24
    1008:	19 06       	cpc	r1, r25
    100a:	e4 f4       	brge	.+56     	; 0x1044 <main+0x76>
    100c:	f8 01       	movw	r30, r16
    100e:	80 83       	st	Z, r24
    1010:	11 82       	std	Z+1, r1	; 0x01
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	91 05       	cpc	r25, r1
    1016:	51 f4       	brne	.+20     	; 0x102c <main+0x5e>
    1018:	6c e1       	ldi	r22, 0x1C	; 28
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	ce 01       	movw	r24, r28
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	20 d0       	rcall	.+64     	; 0x1062 <fputs>
    1022:	ab df       	rcall	.-170    	; 0xf7a <blink>
    1024:	8e 01       	movw	r16, r28
    1026:	0f 5f       	subi	r16, 0xFF	; 255
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	0c c0       	rjmp	.+24     	; 0x1044 <main+0x76>
    102c:	81 34       	cpi	r24, 0x41	; 65
    102e:	91 05       	cpc	r25, r1
    1030:	19 f0       	breq	.+6      	; 0x1038 <main+0x6a>
    1032:	0f 5f       	subi	r16, 0xFF	; 255
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	06 c0       	rjmp	.+12     	; 0x1044 <main+0x76>
    1038:	8b b1       	in	r24, 0x0b	; 11
    103a:	8f 25       	eor	r24, r15
    103c:	8b b9       	out	0x0b, r24	; 11
    103e:	8e 01       	movw	r16, r28
    1040:	0f 5f       	subi	r16, 0xFF	; 255
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	5b d9       	rcall	.-3402   	; 0x300 <CDC_Device_USBTask>
    104a:	7d df       	rcall	.-262    	; 0xf46 <USB_USBTask>
    104c:	d9 cf       	rjmp	.-78     	; 0x1000 <main+0x32>

0000104e <EVENT_USB_Device_Connect>:
	}
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    104e:	08 95       	ret

00001050 <EVENT_USB_Device_Disconnect>:
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    1050:	08 95       	ret

00001052 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	c8 c8       	rjmp	.-3696   	; 0x1e8 <CDC_Device_ConfigureEndpoints>
    1058:	08 95       	ret

0000105a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	c4 c9       	rjmp	.-3192   	; 0x3e8 <CDC_Device_ProcessControlRequest>
    1060:	08 95       	ret

00001062 <fputs>:
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	db 01       	movw	r26, r22
    1070:	13 96       	adiw	r26, 0x03	; 3
    1072:	2c 91       	ld	r18, X
    1074:	21 ff       	sbrs	r18, 1
    1076:	18 c0       	rjmp	.+48     	; 0x10a8 <fputs+0x46>
    1078:	8b 01       	movw	r16, r22
    107a:	7c 01       	movw	r14, r24
    107c:	d0 e0       	ldi	r29, 0x00	; 0
    107e:	c0 e0       	ldi	r28, 0x00	; 0
    1080:	f7 01       	movw	r30, r14
    1082:	81 91       	ld	r24, Z+
    1084:	7f 01       	movw	r14, r30
    1086:	88 23       	and	r24, r24
    1088:	61 f0       	breq	.+24     	; 0x10a2 <fputs+0x40>
    108a:	d8 01       	movw	r26, r16
    108c:	18 96       	adiw	r26, 0x08	; 8
    108e:	ed 91       	ld	r30, X+
    1090:	fc 91       	ld	r31, X
    1092:	19 97       	sbiw	r26, 0x09	; 9
    1094:	b8 01       	movw	r22, r16
    1096:	09 95       	icall
    1098:	89 2b       	or	r24, r25
    109a:	91 f3       	breq	.-28     	; 0x1080 <fputs+0x1e>
    109c:	df ef       	ldi	r29, 0xFF	; 255
    109e:	cf ef       	ldi	r28, 0xFF	; 255
    10a0:	ef cf       	rjmp	.-34     	; 0x1080 <fputs+0x1e>
    10a2:	8d 2f       	mov	r24, r29
    10a4:	9c 2f       	mov	r25, r28
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <fputs+0x4a>
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	9f ef       	ldi	r25, 0xFF	; 255
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	e6 e0       	ldi	r30, 0x06	; 6
    10b2:	0c c0       	rjmp	.+24     	; 0x10cc <__epilogue_restores__+0x18>

000010b4 <__epilogue_restores__>:
    10b4:	2a 88       	ldd	r2, Y+18	; 0x12
    10b6:	39 88       	ldd	r3, Y+17	; 0x11
    10b8:	48 88       	ldd	r4, Y+16	; 0x10
    10ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    10bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    10be:	7d 84       	ldd	r7, Y+13	; 0x0d
    10c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    10c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    10c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    10c6:	b9 84       	ldd	r11, Y+9	; 0x09
    10c8:	c8 84       	ldd	r12, Y+8	; 0x08
    10ca:	df 80       	ldd	r13, Y+7	; 0x07
    10cc:	ee 80       	ldd	r14, Y+6	; 0x06
    10ce:	fd 80       	ldd	r15, Y+5	; 0x05
    10d0:	0c 81       	ldd	r16, Y+4	; 0x04
    10d2:	1b 81       	ldd	r17, Y+3	; 0x03
    10d4:	aa 81       	ldd	r26, Y+2	; 0x02
    10d6:	b9 81       	ldd	r27, Y+1	; 0x01
    10d8:	ce 0f       	add	r28, r30
    10da:	d1 1d       	adc	r29, r1
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	ed 01       	movw	r28, r26
    10e8:	08 95       	ret

000010ea <_exit>:
    10ea:	f8 94       	cli

000010ec <__stop_program>:
    10ec:	ff cf       	rjmp	.-2      	; 0x10ec <__stop_program>
